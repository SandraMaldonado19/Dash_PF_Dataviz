Traceback (most recent call last):
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\nbclient\client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\jupyter_core\utils\__init__.py", line 173, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\nbclient\client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\nbclient\client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\nbclient\client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from datetime import datetime

timeseries_URL = "https://raw.githubusercontent.com/SandraMaldonado19/Dash_PF_Dataviz/main/df_timeseries.csv"
df_tseries = pd.read_csv(timeseries_URL)
df_tseries.head()


# Definimos la función encargada de calcular la media móvil y el intervalo de 
## En este código '1.96' es el valor z para un intervalo de confianza del 95%.

# Función para calcular la media móvil y el intervalo de confianza
def calculate_rolling_mean(df, window_size=12, num_of_std=1.96):
    df['rolling_mean'] = df['value'].rolling(window=window_size).mean()
    df['rolling_std'] = df['value'].rolling(window=window_size).std()
    df['upper_band'] = df['rolling_mean'] + (df['rolling_std'] * num_of_std)
    df['lower_band'] = df['rolling_mean'] - (df['rolling_std'] * num_of_std)
    return df

# Orden de los meses
month_order = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
# Pivotar los datos para tener años en el eje x, meses en el eje y
heatmap_data = df_tseries.pivot(index='month', columns='year', values='value')
# Configurar el orden de los meses en el eje y
heatmap_data = heatmap_data.reindex(month_order)


# Convertir la columna 'date' a tipo datetime si aún no lo está
df_tseries['date'] = pd.to_datetime(df_tseries['date'])
# Agregar una columna 'decade' para agrupar por década
df_tseries['decade'] = (df_tseries['year'] // 10) * 10
# Agregar una columna 'color' basada en la condición de la anomalía
df_tseries['color'] = df_tseries['value'].apply(lambda x: 'red' if x > 0 else 'blue')

df_tseries['year'] = df_tseries['date'].dt.year
df_tseries['month'] = df_tseries['date'].dt.month
# Encuentra los tres años más cálidos, excluyendo el año actual
current_year = datetime.now().year
top_years = df_tseries[df_tseries['year'] != current_year].groupby('year')['value'].mean().nlargest(3).index
# Encuentra los valores máximos para cada mes
max_values = df_tseries.groupby('month')['value'].max()



app = dash.Dash(__name__, suppress_callback_exceptions=True)

app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    html.Main(style={'display':'grid', 'height':'100%','minHeight':'100vh','gridTemplateColumns': '50vh 1fr', 'gridTemplateRows': '50px 1fr 30px', }, children=[
       
        html.Nav(className='nav', style={'display':'fixed','gridArea':'nav', 'gridColumnStart':'1','gridColumnEnd':'2','gridRowStart':'1','gridRowEnd':'5', 'backgroundColor': 'white','border':'1px solid #cbc4ad', 'borderRadius':'5px', 'padding': '20px'}, children=[
            html.H1('Anomalia de Temperatura de Superficie Global', style={'color': 'black', 'marginBottom': '20px', 'fontSize':'1.5rem', 'textAlign':'center'}),
            html.H2('¿Cuáles han sido las variaciones más significativas de la temperatura de la superficie global a lo largo del tiempo?', style={'color': 'black', 'marginBottom': '20px', 'fontSize':'1rem', 'textAlign':'left'}),
            html.H3('¿Aumentará la temperatura los próximos meses?', style={'color': '#de3100', 'marginBottom': '20px', 'fontSize':'1rem','fontWeight':'900', 'textAlign':'left'}),
            html.Ul(style={'display': 'flex', 'justifyContent': 'center','flexDirection':'column', 'alignItems':'center', 'width':'100%','margin':'10px 0','padding':'0'},children =[
                dcc.Link('Inicio', href='/', style={'color': 'white', 'fontSize': '15px','width': '80%','marginBottom':'8px', 'textDecoration': 'none', 'padding': '10px', 'borderRadius': '5px', 'backgroundColor': '#ffa888', 'textAlign': 'center'}),
                dcc.Link('Serie de tiempo', href='/time-series', style={'color': 'white','width': '80%','marginBottom':'8px',  'fontSize': '15px', 'textDecoration': 'none', 'padding': '10px', 'borderRadius': '5px', 'backgroundColor': '#ffa888', 'textAlign': 'center'}),
                dcc.Link('Modelo Predictivo', href='/predictive-model', style={'color': 'white','width': '80%','marginBottom':'8px',  'fontSize': '15px', 'textDecoration': 'none', 'padding': '10px', 'borderRadius': '5px', 'backgroundColor': '#ffa888', 'textAlign': 'center'}),

            ]),
            html.Div(id='explain-content')
        ]),

        html.Section(id='page-content', className='section',style={'gridArea':'section', 'gridColumnStart':'2','gridColumnEnd':'4','gridRowStart':'1','gridRowEnd':'5','backgroundColor': 'white','border':'1px solid #cbc4ad', 'borderRadius':'5px', 'padding': '20px'}),
    ]),
])

@app.callback(Output('explain-content', 'children'),
              [Input('url', 'pathname')])
def display_page(pathname):
    if pathname == '/time-series':
        return html.Div() 
    elif pathname == '/predictive-model':
        return ()
    else:
        return (
            )
      
# Update the index
@app.callback(Output('page-content', 'children'),
              [Input('url', 'pathname')])
def display_page(pathname):
    if pathname == '/time-series':
        return (html.Div([
                 html.H2('Serie de tiempo - Anomalía de Temperatura Global (1850 - 2023)'),
                dcc.Graph(id='timeseries-graph'),
                ]),
                html.Div([
                    html.H2(" Boxplot - Variación mensual multianual (1850 - 2023)",),
                    dcc.Graph(id='boxplot')]),
                html.Div([
                    html.Div([
                        html.H2("Heatmap- Exploración de patrones y tendencias"),
                        dcc.Graph(id='heatmap'),]),
                    html.Div([
                        html.H1("Barplot - Promedios Decenales de Anomalías de Temperatura"),
                        dcc.Graph(id='bar-chart'),
                    ])
                ]),
                html.Div([
                    dcc.Dropdown(
                        id='year-picker',
                        options=[{'label': i, 'value': i} for i in df_tseries['year'].unique()],
                        value=[df_tseries['year'].max()],
                        multi=True
                    ),
                     dcc.Graph(id='temperature-graph')
                ])
            )
    elif pathname == '/predictive-model':
        return html.Div([
            html.H3('Estás en la página del modelo predictivo')
        ])
    else:
        return (
            html.H4('Sobre el conjunto de datos',style={'fontSize':'1rem', 'textAlign':'left'}),
            html.P('Presentamos el análisis de un conjunto de datos llamado HadCRUT5, que mide los cambios de temperatura cercana a la superficie en todo el mundo, entre 1850 a 2018. HadCRUT5 presenta anomalías mensuales promedio de temperatura cercana a la superficie, en relación con el período 1961–1990.', style={'fontSize':'0.8rem', 'textAlign':'left','lineHeight':'150%'}),
            html.P('En general, este conjunto de datos muestra un aumento del calentamiento promedio global desde mediados del siglo 19 y en los últimos años, en consonancia con otros análisis. Este fenómeno se debe a múltiples factores, incluidos una mejor representación del calentamiento del Ártico y una mejor comprensión de los sesgos en evolución en las mediciones sobre la superficie del mar y la tierra.', style={'fontSize':'0.8rem', 'textAlign':'left','lineHeight':'150%'}),
            html.P('Para revisar a detalle el proceso de obtención y procesamiento de los datos, visite la información de referencia. ', style={'fontSize':'0.8rem', 'textAlign':'left','lineHeight':'150%'}),
            html.P('Morice, C. P., Kennedy, J. J., Rayner, N. A., Winn, J. P., Hogan, E., Killick, R. E., Dunn, R. J. H., Osborn, T. J., Jones, P. D., & Simpson, I. R. (2021). An Updated Assessment of Near-Surface Temperature Change From 1850: The HadCRUT5 Data Set. Journal of Geophysical Research: Atmospheres, 126(3), e2019JD032361. https://doi.org/10.1029/2019JD032361', style={'fontSize':'0.8rem', 'textAlign':'left','lineHeight':'150%'}),
        )


# Definir la función callback
@app.callback(Output('timeseries-graph', 'figure'),
              [Input('timeseries-graph', 'hoverData')])
def update_graph(hoverData):
    # Calcular la media móvil y el intervalo de confianza
    df_timeseries = calculate_rolling_mean(df_tseries.copy())  # Asegúrate de tener una copia del DataFrame original
    trace_data = []

    # Agregar la serie temporal original
    trace_data.append({
        'x': df_timeseries['date'],
        'y': df_timeseries['value'],
        'type': 'line',
        'mode': 'lines',
        'name': 'Serie de tiempo',
        'line': {'color': 'blue'}
    })

    # Agregar la media móvil
    trace_data.append({
        'x': df_timeseries['date'],
        'y': df_timeseries['rolling_mean'],
        'type': 'line',
        'mode': 'lines',
        'name': 'Media móvil de 12 meses',
        'line': {'color': 'red'}
    })

    # Agregar el intervalo de confianza
    trace_data.append({
        'x': df_timeseries['date'],
        'y': df_timeseries['upper_band'],
        'type': 'line',
        'mode': 'lines',
        'name': 'IC - 95%',
        'line': {'color': 'green', 'dash': 'dash'}
    })

    trace_data.append({
        'x': df_timeseries['date'],
        'y': df_timeseries['lower_band'],
        'type': 'line',
        'mode': 'lines',
        'line': {'color': 'green', 'dash': 'dash'}
    })

    # Marcar la media correspondiente al año cuando se pasa el ratón sobre la gráfica
    if hoverData:
        year_hovered = hoverData['points'][0]['x'].split('-')[0]
        mean_value = df_timeseries[df_timeseries['year'] == int(year_hovered)]['rolling_mean'].iloc[0]
        trace_data.append({
            'x': [hoverData['points'][0]['x']],
            'y': [mean_value],
            'type': 'scatter',
            'mode': 'markers',
            'name': f'Mean {year_hovered}',
            'marker': {'color': 'black', 'size': 10},
            'text': [f'Mean {year_hovered}']
        })

    figure = {
        'data': trace_data,
        'layout': {
            'xaxis': {'title': 'Fecha'},
            'yaxis': {'title': 'Anomalía de temperatura (°C)'},
            'margin': {'b': 30, 'r': 10, 'l': 60, 't': 50},
            'legend': {'x': 0, 'y': 1}
        }
    }

    return figure

@app.callback(Output('boxplot', 'figure'),
              [Input('boxplot', 'hoverData')])
def update_boxplot(hoverData):
    # Crear el boxplot con Plotly Graph Objects
    fig = go.Figure()

    # Agregar boxplots para cada mes
    for month in df_tseries['month'].unique():
        data = df_tseries[df_tseries['month'] == month]
        fig.add_trace(go.Box(x=data['month'], y=data['value'], name=str(month), width=0.5))

    # Agregar la línea de tendencia (media multianual)
    trend_line = df_tseries.groupby('month')['value'].mean().reset_index()
    
    # Ordenar los datos por el orden de los meses
    ordered_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
    trend_line['month'] = pd.Categorical(trend_line['month'], categories=ordered_months, ordered=True)
    trend_line = trend_line.sort_values('month')

    fig.add_trace(go.Scatter(x=trend_line['month'], y=trend_line['value'],
                             mode='lines', line=dict(color='black', dash='dash'),
                             name='Media Multianual'))

    # Ajustar el diseño del gráfico
    fig.update_layout(xaxis={'title': 'Mes'}, yaxis={'title': 'Anomalía de Temperatura (°C)'},
                      boxmode='group')  # Para agrupar los boxplots en el eje x

    return fig

@app.callback(Output('heatmap', 'figure'),
              [Input('heatmap', 'hoverData')])
def update_heatmap(hoverData):
    # Crear el mapa de calor con Plotly Graph Objects
    fig = go.Figure()

    # Añadir el mapa de calor
    fig.add_trace(go.Heatmap(x=heatmap_data.columns, y=heatmap_data.index, z=heatmap_data.values,
                             colorscale='RdBu', colorbar=dict(title='Anomalía de Temperatura'), reversescale=True))

    # Ajustar el diseño del gráfico
    fig.update_layout(xaxis={'title': 'Año'}, yaxis={'title': 'Mes', 'categoryorder': 'array', 'categoryarray': month_order})

    return fig


@app.callback(Output('bar-chart', 'figure'),
              [Input('bar-chart', 'hoverData')])
def update_bar_chart(hoverData):
    # Calcular los promedios decenales
    decade_means = df_tseries.groupby('decade').agg({'value': 'mean', 'color': 'first'}).reset_index()

    # Crear el gráfico de barras con Plotly Express
    fig = px.bar(decade_means, x='decade', y='value', color='color',
                 labels={'value': 'Anomalía de Temperatura (°C)'}, 
                 color_discrete_map={'red': 'red', 'blue': 'blue'})

    # Modificar las etiquetas de los ticks en el eje x
    fig.update_layout(
        xaxis=dict(
            tickmode='array',
            tickvals=decade_means['decade'],
            ticktext=[f"{decade}s" for decade in decade_means['decade']]
        ),
        showlegend=False
    )

    return fig

@app.callback(
    Output('temperature-graph', 'figure'),
    [Input('year-picker', 'value')]
)
def update_figure(selected_years):
    traces = []
    markers = ['circle', 'square', 'diamond', 'cross', 'x']

    # Añade las líneas para los años más cálidos
    for i, year in enumerate(top_years):
        df_year = df_tseries[df_tseries['year'] == year]
        traces.append(go.Scatter(
            x=df_year['month'],
            y=df_year['value'],
            mode='lines+markers',
            name=str(year),
            marker=dict(
                symbol=markers[i % len(markers)],
                size=10
            )
        ))

    # Añade las líneas para los años seleccionados
    for i, selected_year in enumerate(selected_years):
        df_selected = df_tseries[df_tseries['year'] == selected_year]
        traces.append(go.Scatter(
            x=df_selected['month'],
            y=df_selected['value'],
            mode='lines+markers',
            name=str(selected_year),
            line={'color': 'black', 'width': 2},
            marker=dict(
                symbol=markers[(i + len(top_years)) % len(markers)],
                size=10
            )
        ))

    # Añade la línea para los valores máximos
    traces.append(go.Scatter(
        x=np.arange(1, 13),
        y=max_values,
        mode='lines',
        name='Máximo histórico (1850 - 2022)',
        line={'color': 'darkgrey', 'width': 2.5}
    ))

    return {
        'data': traces,
        'layout': go.Layout(
            xaxis={'title': 'Mes', 'tickvals': list(range(1, 13)), 'ticktext': ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre']},
            yaxis={'title': 'Anomalía de temperatura (°C)'},
            hovermode='closest'
        )
    }

if __name__ == '__main__':
    #app.run_server(debug=True) # <- For testing purposes
    app.run_server(debug=True, host='0.0.0.0', port=9000) # <- To Dockerize the Dash
    
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mOSError[0m                                   Traceback (most recent call last)
File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connection.py:203[0m, in [0;36mHTTPConnection._new_conn[1;34m(self)[0m
[0;32m    202[0m [38;5;28;01mtry[39;00m:
[1;32m--> 203[0m     sock [38;5;241m=[39m [43mconnection[49m[38;5;241;43m.[39;49m[43mcreate_connection[49m[43m([49m
[0;32m    204[0m [43m        [49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_dns_host[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mport[49m[43m)[49m[43m,[49m
[0;32m    205[0m [43m        [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mtimeout[49m[43m,[49m
[0;32m    206[0m [43m        [49m[43msource_address[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43msource_address[49m[43m,[49m
[0;32m    207[0m [43m        [49m[43msocket_options[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43msocket_options[49m[43m,[49m
[0;32m    208[0m [43m    [49m[43m)[49m
[0;32m    209[0m [38;5;28;01mexcept[39;00m socket[38;5;241m.[39mgaierror [38;5;28;01mas[39;00m e:

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\util\connection.py:85[0m, in [0;36mcreate_connection[1;34m(address, timeout, source_address, socket_options)[0m
[0;32m     84[0m [38;5;28;01mtry[39;00m:
[1;32m---> 85[0m     [38;5;28;01mraise[39;00m err
[0;32m     86[0m [38;5;28;01mfinally[39;00m:
[0;32m     87[0m     [38;5;66;03m# Break explicitly a reference cycle[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\util\connection.py:73[0m, in [0;36mcreate_connection[1;34m(address, timeout, source_address, socket_options)[0m
[0;32m     72[0m     sock[38;5;241m.[39mbind(source_address)
[1;32m---> 73[0m [43msock[49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m[43msa[49m[43m)[49m
[0;32m     74[0m [38;5;66;03m# Break explicitly a reference cycle[39;00m

[1;31mOSError[0m: [WinError 10049] La dirección solicitada no es válida en este contexto

The above exception was the direct cause of the following exception:

[1;31mNewConnectionError[0m                        Traceback (most recent call last)
File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connectionpool.py:791[0m, in [0;36mHTTPConnectionPool.urlopen[1;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)[0m
[0;32m    790[0m [38;5;66;03m# Make the request on the HTTPConnection object[39;00m
[1;32m--> 791[0m response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_make_request(
[0;32m    792[0m     conn,
[0;32m    793[0m     method,
[0;32m    794[0m     url,
[0;32m    795[0m     timeout[38;5;241m=[39mtimeout_obj,
[0;32m    796[0m     body[38;5;241m=[39mbody,
[0;32m    797[0m     headers[38;5;241m=[39mheaders,
[0;32m    798[0m     chunked[38;5;241m=[39mchunked,
[0;32m    799[0m     retries[38;5;241m=[39mretries,
[0;32m    800[0m     response_conn[38;5;241m=[39mresponse_conn,
[0;32m    801[0m     preload_content[38;5;241m=[39mpreload_content,
[0;32m    802[0m     decode_content[38;5;241m=[39mdecode_content,
[0;32m    803[0m     [38;5;241m*[39m[38;5;241m*[39mresponse_kw,
[0;32m    804[0m )
[0;32m    806[0m [38;5;66;03m# Everything went great![39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connectionpool.py:497[0m, in [0;36mHTTPConnectionPool._make_request[1;34m(self, conn, method, url, body, headers, retries, timeout, chunked, response_conn, preload_content, decode_content, enforce_content_length)[0m
[0;32m    496[0m [38;5;28;01mtry[39;00m:
[1;32m--> 497[0m     [43mconn[49m[38;5;241;43m.[39;49m[43mrequest[49m[43m([49m
[0;32m    498[0m [43m        [49m[43mmethod[49m[43m,[49m
[0;32m    499[0m [43m        [49m[43murl[49m[43m,[49m
[0;32m    500[0m [43m        [49m[43mbody[49m[38;5;241;43m=[39;49m[43mbody[49m[43m,[49m
[0;32m    501[0m [43m        [49m[43mheaders[49m[38;5;241;43m=[39;49m[43mheaders[49m[43m,[49m
[0;32m    502[0m [43m        [49m[43mchunked[49m[38;5;241;43m=[39;49m[43mchunked[49m[43m,[49m
[0;32m    503[0m [43m        [49m[43mpreload_content[49m[38;5;241;43m=[39;49m[43mpreload_content[49m[43m,[49m
[0;32m    504[0m [43m        [49m[43mdecode_content[49m[38;5;241;43m=[39;49m[43mdecode_content[49m[43m,[49m
[0;32m    505[0m [43m        [49m[43menforce_content_length[49m[38;5;241;43m=[39;49m[43menforce_content_length[49m[43m,[49m
[0;32m    506[0m [43m    [49m[43m)[49m
[0;32m    508[0m [38;5;66;03m# We are swallowing BrokenPipeError (errno.EPIPE) since the server is[39;00m
[0;32m    509[0m [38;5;66;03m# legitimately able to close the connection after sending a valid response.[39;00m
[0;32m    510[0m [38;5;66;03m# With this behaviour, the received response is still readable.[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connection.py:395[0m, in [0;36mHTTPConnection.request[1;34m(self, method, url, body, headers, chunked, preload_content, decode_content, enforce_content_length)[0m
[0;32m    394[0m     [38;5;28mself[39m[38;5;241m.[39mputheader(header, value)
[1;32m--> 395[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mendheaders[49m[43m([49m[43m)[49m
[0;32m    397[0m [38;5;66;03m# If we're given a body we start sending that in chunks.[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\http\client.py:1280[0m, in [0;36mHTTPConnection.endheaders[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1279[0m     [38;5;28;01mraise[39;00m CannotSendHeader()
[1;32m-> 1280[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_send_output[49m[43m([49m[43mmessage_body[49m[43m,[49m[43m [49m[43mencode_chunked[49m[38;5;241;43m=[39;49m[43mencode_chunked[49m[43m)[49m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\http\client.py:1040[0m, in [0;36mHTTPConnection._send_output[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1039[0m [38;5;28;01mdel[39;00m [38;5;28mself[39m[38;5;241m.[39m_buffer[:]
[1;32m-> 1040[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43msend[49m[43m([49m[43mmsg[49m[43m)[49m
[0;32m   1042[0m [38;5;28;01mif[39;00m message_body [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m   1043[0m 
[0;32m   1044[0m     [38;5;66;03m# create a consistent interface to message_body[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\http\client.py:980[0m, in [0;36mHTTPConnection.send[1;34m(self, data)[0m
[0;32m    979[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mauto_open:
[1;32m--> 980[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m[43m)[49m
[0;32m    981[0m [38;5;28;01melse[39;00m:

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connection.py:243[0m, in [0;36mHTTPConnection.connect[1;34m(self)[0m
[0;32m    242[0m [38;5;28;01mdef[39;00m [38;5;21mconnect[39m([38;5;28mself[39m) [38;5;241m-[39m[38;5;241m>[39m [38;5;28;01mNone[39;00m:
[1;32m--> 243[0m     [38;5;28mself[39m[38;5;241m.[39msock [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_new_conn[49m[43m([49m[43m)[49m
[0;32m    244[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_tunnel_host:
[0;32m    245[0m         [38;5;66;03m# If we're tunneling it means we're connected to our proxy.[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connection.py:218[0m, in [0;36mHTTPConnection._new_conn[1;34m(self)[0m
[0;32m    217[0m [38;5;28;01mexcept[39;00m [38;5;167;01mOSError[39;00m [38;5;28;01mas[39;00m e:
[1;32m--> 218[0m     [38;5;28;01mraise[39;00m NewConnectionError(
[0;32m    219[0m         [38;5;28mself[39m, [38;5;124mf[39m[38;5;124m"[39m[38;5;124mFailed to establish a new connection: [39m[38;5;132;01m{[39;00me[38;5;132;01m}[39;00m[38;5;124m"[39m
[0;32m    220[0m     ) [38;5;28;01mfrom[39;00m [38;5;21;01me[39;00m
[0;32m    222[0m [38;5;66;03m# Audit hooks are only available in Python 3.8+[39;00m

[1;31mNewConnectionError[0m: <urllib3.connection.HTTPConnection object at 0x000002188BDF9130>: Failed to establish a new connection: [WinError 10049] La dirección solicitada no es válida en este contexto

The above exception was the direct cause of the following exception:

[1;31mMaxRetryError[0m                             Traceback (most recent call last)
File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\requests\adapters.py:486[0m, in [0;36mHTTPAdapter.send[1;34m(self, request, stream, timeout, verify, cert, proxies)[0m
[0;32m    485[0m [38;5;28;01mtry[39;00m:
[1;32m--> 486[0m     resp [38;5;241m=[39m [43mconn[49m[38;5;241;43m.[39;49m[43murlopen[49m[43m([49m
[0;32m    487[0m [43m        [49m[43mmethod[49m[38;5;241;43m=[39;49m[43mrequest[49m[38;5;241;43m.[39;49m[43mmethod[49m[43m,[49m
[0;32m    488[0m [43m        [49m[43murl[49m[38;5;241;43m=[39;49m[43murl[49m[43m,[49m
[0;32m    489[0m [43m        [49m[43mbody[49m[38;5;241;43m=[39;49m[43mrequest[49m[38;5;241;43m.[39;49m[43mbody[49m[43m,[49m
[0;32m    490[0m [43m        [49m[43mheaders[49m[38;5;241;43m=[39;49m[43mrequest[49m[38;5;241;43m.[39;49m[43mheaders[49m[43m,[49m
[0;32m    491[0m [43m        [49m[43mredirect[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[0;32m    492[0m [43m        [49m[43massert_same_host[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[0;32m    493[0m [43m        [49m[43mpreload_content[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[0;32m    494[0m [43m        [49m[43mdecode_content[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[0;32m    495[0m [43m        [49m[43mretries[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mmax_retries[49m[43m,[49m
[0;32m    496[0m [43m        [49m[43mtimeout[49m[38;5;241;43m=[39;49m[43mtimeout[49m[43m,[49m
[0;32m    497[0m [43m        [49m[43mchunked[49m[38;5;241;43m=[39;49m[43mchunked[49m[43m,[49m
[0;32m    498[0m [43m    [49m[43m)[49m
[0;32m    500[0m [38;5;28;01mexcept[39;00m (ProtocolError, [38;5;167;01mOSError[39;00m) [38;5;28;01mas[39;00m err:

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\connectionpool.py:845[0m, in [0;36mHTTPConnectionPool.urlopen[1;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, preload_content, decode_content, **response_kw)[0m
[0;32m    843[0m     new_e [38;5;241m=[39m ProtocolError([38;5;124m"[39m[38;5;124mConnection aborted.[39m[38;5;124m"[39m, new_e)
[1;32m--> 845[0m retries [38;5;241m=[39m [43mretries[49m[38;5;241;43m.[39;49m[43mincrement[49m[43m([49m
[0;32m    846[0m [43m    [49m[43mmethod[49m[43m,[49m[43m [49m[43murl[49m[43m,[49m[43m [49m[43merror[49m[38;5;241;43m=[39;49m[43mnew_e[49m[43m,[49m[43m [49m[43m_pool[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43m_stacktrace[49m[38;5;241;43m=[39;49m[43msys[49m[38;5;241;43m.[39;49m[43mexc_info[49m[43m([49m[43m)[49m[43m[[49m[38;5;241;43m2[39;49m[43m][49m
[0;32m    847[0m [43m[49m[43m)[49m
[0;32m    848[0m retries[38;5;241m.[39msleep()

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\urllib3\util\retry.py:515[0m, in [0;36mRetry.increment[1;34m(self, method, url, response, error, _pool, _stacktrace)[0m
[0;32m    514[0m     reason [38;5;241m=[39m error [38;5;129;01mor[39;00m ResponseError(cause)
[1;32m--> 515[0m     [38;5;28;01mraise[39;00m MaxRetryError(_pool, url, reason) [38;5;28;01mfrom[39;00m [38;5;21;01mreason[39;00m  [38;5;66;03m# type: ignore[arg-type][39;00m
[0;32m    517[0m log[38;5;241m.[39mdebug([38;5;124m"[39m[38;5;124mIncremented Retry for (url=[39m[38;5;124m'[39m[38;5;132;01m%s[39;00m[38;5;124m'[39m[38;5;124m): [39m[38;5;132;01m%r[39;00m[38;5;124m"[39m, url, new_retry)

[1;31mMaxRetryError[0m: HTTPConnectionPool(host='0.0.0.0', port=9000): Max retries exceeded with url: /_alive_9fac62bc-d431-4318-8d9a-f440f80d6a53 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002188BDF9130>: Failed to establish a new connection: [WinError 10049] La dirección solicitada no es válida en este contexto'))

During handling of the above exception, another exception occurred:

[1;31mConnectionError[0m                           Traceback (most recent call last)
Cell [1;32mIn[11], line 328[0m
[0;32m    317[0m     [38;5;28;01mreturn[39;00m {
[0;32m    318[0m         [38;5;124m'[39m[38;5;124mdata[39m[38;5;124m'[39m: traces,
[0;32m    319[0m         [38;5;124m'[39m[38;5;124mlayout[39m[38;5;124m'[39m: go[38;5;241m.[39mLayout(
[1;32m   (...)[0m
[0;32m    323[0m         )
[0;32m    324[0m     }
[0;32m    326[0m [38;5;28;01mif[39;00m [38;5;18m__name__[39m [38;5;241m==[39m [38;5;124m'[39m[38;5;124m__main__[39m[38;5;124m'[39m:
[0;32m    327[0m     [38;5;66;03m#app.run_server(debug=True) # <- For testing purposes[39;00m
[1;32m--> 328[0m     [43mapp[49m[38;5;241;43m.[39;49m[43mrun_server[49m[43m([49m[43mdebug[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mhost[49m[38;5;241;43m=[39;49m[38;5;124;43m'[39;49m[38;5;124;43m0.0.0.0[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mport[49m[38;5;241;43m=[39;49m[38;5;241;43m9000[39;49m[43m)[49m [38;5;66;03m# <- To Dockerize the Dash[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\dash\dash.py:2175[0m, in [0;36mDash.run_server[1;34m(self, *args, **kwargs)[0m
[0;32m   2169[0m [38;5;28;01mdef[39;00m [38;5;21mrun_server[39m([38;5;28mself[39m, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m   2170[0m [38;5;250m    [39m[38;5;124;03m"""`run_server` is a deprecated alias of `run` and may be removed in a[39;00m
[0;32m   2171[0m [38;5;124;03m    future version. We recommend using `app.run` instead.[39;00m
[0;32m   2172[0m 
[0;32m   2173[0m [38;5;124;03m    See `app.run` for usage information.[39;00m
[0;32m   2174[0m [38;5;124;03m    """[39;00m
[1;32m-> 2175[0m     [38;5;28mself[39m[38;5;241m.[39mrun([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\dash\dash.py:2066[0m, in [0;36mDash.run[1;34m(self, host, port, proxy, debug, jupyter_mode, jupyter_width, jupyter_height, jupyter_server_url, dev_tools_ui, dev_tools_props_check, dev_tools_serve_dev_bundles, dev_tools_hot_reload, dev_tools_hot_reload_interval, dev_tools_hot_reload_watch_interval, dev_tools_hot_reload_max_retry, dev_tools_silence_routes_logging, dev_tools_prune_errors, **flask_run_options)[0m
[0;32m   2063[0m             extra_files[38;5;241m.[39mappend(path)
[0;32m   2065[0m [38;5;28;01mif[39;00m jupyter_dash[38;5;241m.[39mactive:
[1;32m-> 2066[0m     [43mjupyter_dash[49m[38;5;241;43m.[39;49m[43mrun_app[49m[43m([49m
[0;32m   2067[0m [43m        [49m[38;5;28;43mself[39;49m[43m,[49m
[0;32m   2068[0m [43m        [49m[43mmode[49m[38;5;241;43m=[39;49m[43mjupyter_mode[49m[43m,[49m
[0;32m   2069[0m [43m        [49m[43mwidth[49m[38;5;241;43m=[39;49m[43mjupyter_width[49m[43m,[49m
[0;32m   2070[0m [43m        [49m[43mheight[49m[38;5;241;43m=[39;49m[43mjupyter_height[49m[43m,[49m
[0;32m   2071[0m [43m        [49m[43mhost[49m[38;5;241;43m=[39;49m[43mhost[49m[43m,[49m
[0;32m   2072[0m [43m        [49m[43mport[49m[38;5;241;43m=[39;49m[43mport[49m[43m,[49m
[0;32m   2073[0m [43m        [49m[43mserver_url[49m[38;5;241;43m=[39;49m[43mjupyter_server_url[49m[43m,[49m
[0;32m   2074[0m [43m    [49m[43m)[49m
[0;32m   2075[0m [38;5;28;01melse[39;00m:
[0;32m   2076[0m     [38;5;28mself[39m[38;5;241m.[39mserver[38;5;241m.[39mrun(host[38;5;241m=[39mhost, port[38;5;241m=[39mport, debug[38;5;241m=[39mdebug, [38;5;241m*[39m[38;5;241m*[39mflask_run_options)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\dash\_jupyter.py:401[0m, in [0;36mJupyterDash.run_app[1;34m(self, app, mode, width, height, host, port, server_url)[0m
[0;32m    399[0m     display(HTML(msg))
[0;32m    400[0m [38;5;28;01melse[39;00m:
[1;32m--> 401[0m     [38;5;28;01mraise[39;00m final_error

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\dash\_jupyter.py:388[0m, in [0;36mJupyterDash.run_app[1;34m(self, app, mode, width, height, host, port, server_url)[0m
[0;32m    385[0m         [38;5;28;01mraise[39;00m err
[0;32m    387[0m [38;5;28;01mtry[39;00m:
[1;32m--> 388[0m     [43mwait_for_app[49m[43m([49m[43m)[49m
[0;32m    390[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39min_colab:
[0;32m    391[0m         JupyterDash[38;5;241m.[39m_display_in_colab(dashboard_url, port, mode, width, height)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\retrying.py:56[0m, in [0;36mretry.<locals>.wrap.<locals>.wrapped_f[1;34m(*args, **kw)[0m
[0;32m     54[0m [38;5;129m@six[39m[38;5;241m.[39mwraps(f)
[0;32m     55[0m [38;5;28;01mdef[39;00m [38;5;21mwrapped_f[39m([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkw):
[1;32m---> 56[0m     [38;5;28;01mreturn[39;00m Retrying([38;5;241m*[39mdargs, [38;5;241m*[39m[38;5;241m*[39mdkw)[38;5;241m.[39mcall(f, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkw)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\retrying.py:266[0m, in [0;36mRetrying.call[1;34m(self, fn, *args, **kwargs)[0m
[0;32m    263[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mstop(attempt_number, delay_since_first_attempt_ms):
[0;32m    264[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_wrap_exception [38;5;129;01mand[39;00m attempt[38;5;241m.[39mhas_exception:
[0;32m    265[0m         [38;5;66;03m# get() on an attempt with an exception should cause it to be raised, but raise just in case[39;00m
[1;32m--> 266[0m         [38;5;28;01mraise[39;00m [43mattempt[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43m)[49m
[0;32m    267[0m     [38;5;28;01melse[39;00m:
[0;32m    268[0m         [38;5;28;01mraise[39;00m RetryError(attempt)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\retrying.py:301[0m, in [0;36mAttempt.get[1;34m(self, wrap_exception)[0m
[0;32m    299[0m         [38;5;28;01mraise[39;00m RetryError([38;5;28mself[39m)
[0;32m    300[0m     [38;5;28;01melse[39;00m:
[1;32m--> 301[0m         [43msix[49m[38;5;241;43m.[39;49m[43mreraise[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvalue[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvalue[49m[43m[[49m[38;5;241;43m1[39;49m[43m][49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvalue[49m[43m[[49m[38;5;241;43m2[39;49m[43m][49m[43m)[49m
[0;32m    302[0m [38;5;28;01melse[39;00m:
[0;32m    303[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mvalue

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\six.py:719[0m, in [0;36mreraise[1;34m(tp, value, tb)[0m
[0;32m    717[0m     [38;5;28;01mif[39;00m value[38;5;241m.[39m__traceback__ [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m tb:
[0;32m    718[0m         [38;5;28;01mraise[39;00m value[38;5;241m.[39mwith_traceback(tb)
[1;32m--> 719[0m     [38;5;28;01mraise[39;00m value
[0;32m    720[0m [38;5;28;01mfinally[39;00m:
[0;32m    721[0m     value [38;5;241m=[39m [38;5;28;01mNone[39;00m

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\retrying.py:251[0m, in [0;36mRetrying.call[1;34m(self, fn, *args, **kwargs)[0m
[0;32m    248[0m     [38;5;28mself[39m[38;5;241m.[39m_before_attempts(attempt_number)
[0;32m    250[0m [38;5;28;01mtry[39;00m:
[1;32m--> 251[0m     attempt [38;5;241m=[39m Attempt(fn([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs), attempt_number, [38;5;28;01mFalse[39;00m)
[0;32m    252[0m [38;5;28;01mexcept[39;00m:
[0;32m    253[0m     tb [38;5;241m=[39m sys[38;5;241m.[39mexc_info()

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\dash\_jupyter.py:385[0m, in [0;36mJupyterDash.run_app.<locals>.wait_for_app[1;34m()[0m
[0;32m    383[0m [38;5;28;01mexcept[39;00m requests[38;5;241m.[39mConnectionError [38;5;28;01mas[39;00m err:
[0;32m    384[0m     _get_error()
[1;32m--> 385[0m     [38;5;28;01mraise[39;00m err

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\dash\_jupyter.py:372[0m, in [0;36mJupyterDash.run_app.<locals>.wait_for_app[1;34m()[0m
[0;32m    370[0m _get_error()
[0;32m    371[0m [38;5;28;01mtry[39;00m:
[1;32m--> 372[0m     req [38;5;241m=[39m [43mrequests[49m[38;5;241;43m.[39;49m[43mget[49m[43m([49m[43malive_url[49m[43m)[49m
[0;32m    373[0m     res [38;5;241m=[39m req[38;5;241m.[39mcontent[38;5;241m.[39mdecode()
[0;32m    374[0m     [38;5;28;01mif[39;00m req[38;5;241m.[39mstatus_code [38;5;241m!=[39m [38;5;241m200[39m:

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\requests\api.py:73[0m, in [0;36mget[1;34m(url, params, **kwargs)[0m
[0;32m     62[0m [38;5;28;01mdef[39;00m [38;5;21mget[39m(url, params[38;5;241m=[39m[38;5;28;01mNone[39;00m, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m     63[0m [38;5;250m    [39m[38;5;124mr[39m[38;5;124;03m"""Sends a GET request.[39;00m
[0;32m     64[0m 
[0;32m     65[0m [38;5;124;03m    :param url: URL for the new :class:`Request` object.[39;00m
[1;32m   (...)[0m
[0;32m     70[0m [38;5;124;03m    :rtype: requests.Response[39;00m
[0;32m     71[0m [38;5;124;03m    """[39;00m
[1;32m---> 73[0m     [38;5;28;01mreturn[39;00m request([38;5;124m"[39m[38;5;124mget[39m[38;5;124m"[39m, url, params[38;5;241m=[39mparams, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\requests\api.py:59[0m, in [0;36mrequest[1;34m(method, url, **kwargs)[0m
[0;32m     55[0m [38;5;66;03m# By using the 'with' statement we are sure the session is closed, thus we[39;00m
[0;32m     56[0m [38;5;66;03m# avoid leaving sockets open which can trigger a ResourceWarning in some[39;00m
[0;32m     57[0m [38;5;66;03m# cases, and look like a memory leak in others.[39;00m
[0;32m     58[0m [38;5;28;01mwith[39;00m sessions[38;5;241m.[39mSession() [38;5;28;01mas[39;00m session:
[1;32m---> 59[0m     [38;5;28;01mreturn[39;00m session[38;5;241m.[39mrequest(method[38;5;241m=[39mmethod, url[38;5;241m=[39murl, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\requests\sessions.py:589[0m, in [0;36mSession.request[1;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)[0m
[0;32m    584[0m send_kwargs [38;5;241m=[39m {
[0;32m    585[0m     [38;5;124m"[39m[38;5;124mtimeout[39m[38;5;124m"[39m: timeout,
[0;32m    586[0m     [38;5;124m"[39m[38;5;124mallow_redirects[39m[38;5;124m"[39m: allow_redirects,
[0;32m    587[0m }
[0;32m    588[0m send_kwargs[38;5;241m.[39mupdate(settings)
[1;32m--> 589[0m resp [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39msend(prep, [38;5;241m*[39m[38;5;241m*[39msend_kwargs)
[0;32m    591[0m [38;5;28;01mreturn[39;00m resp

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\requests\sessions.py:703[0m, in [0;36mSession.send[1;34m(self, request, **kwargs)[0m
[0;32m    700[0m start [38;5;241m=[39m preferred_clock()
[0;32m    702[0m [38;5;66;03m# Send the request[39;00m
[1;32m--> 703[0m r [38;5;241m=[39m adapter[38;5;241m.[39msend(request, [38;5;241m*[39m[38;5;241m*[39mkwargs)
[0;32m    705[0m [38;5;66;03m# Total elapsed time of the request (approximately)[39;00m
[0;32m    706[0m elapsed [38;5;241m=[39m preferred_clock() [38;5;241m-[39m start

File [1;32mc:\Users\Sandra\anaconda3\envs\dataviz_venv\lib\site-packages\requests\adapters.py:519[0m, in [0;36mHTTPAdapter.send[1;34m(self, request, stream, timeout, verify, cert, proxies)[0m
[0;32m    515[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(e[38;5;241m.[39mreason, _SSLError):
[0;32m    516[0m         [38;5;66;03m# This branch is for urllib3 v1.22 and later.[39;00m
[0;32m    517[0m         [38;5;28;01mraise[39;00m SSLError(e, request[38;5;241m=[39mrequest)
[1;32m--> 519[0m     [38;5;28;01mraise[39;00m [38;5;167;01mConnectionError[39;00m(e, request[38;5;241m=[39mrequest)
[0;32m    521[0m [38;5;28;01mexcept[39;00m ClosedPoolError [38;5;28;01mas[39;00m e:
[0;32m    522[0m     [38;5;28;01mraise[39;00m [38;5;167;01mConnectionError[39;00m(e, request[38;5;241m=[39mrequest)

[1;31mConnectionError[0m: HTTPConnectionPool(host='0.0.0.0', port=9000): Max retries exceeded with url: /_alive_9fac62bc-d431-4318-8d9a-f440f80d6a53 (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x000002188BDF9130>: Failed to establish a new connection: [WinError 10049] La dirección solicitada no es válida en este contexto'))

